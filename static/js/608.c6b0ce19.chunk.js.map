{"version":3,"file":"static/js/608.c6b0ce19.chunk.js","mappings":"+SACMA,EAAM,mCAGCC,EAAmB,mCAAG,uGAElBC,EAAAA,EAAAA,IAAA,mEACiDF,IAH/B,wEAM/BG,QAAQC,IAAR,MAN+B,wDAAH,qDAUnBC,EAAkB,mCAAG,WAAMC,GAAN,0FAEjBJ,EAAAA,EAAAA,IAAA,4DAC0CF,EAD1C,iCACsEM,EADtE,YAFiB,wEAM9BH,QAAQC,IAAR,MAN8B,wDAAH,sDAUlBG,EAAc,mCAAG,WAAMC,GAAN,0FAEbN,EAAAA,EAAAA,IAAA,6CAC2BM,EAD3B,oBAC8CR,EAD9C,oBAFa,wEAM1BG,QAAQC,IAAR,MAN0B,wDAAH,sDAUdK,EAAc,mCAAG,WAAMD,GAAN,0FAEbN,EAAAA,EAAAA,IAAA,6CAC2BM,EAD3B,4BACsDR,EADtD,oBAFa,wEAM1BG,QAAQC,IAAR,MAN0B,wDAAH,sDAUdM,EAAiB,mCAAG,WAAMF,GAAN,0FAEhBN,EAAAA,EAAAA,IAAA,6CAC2BM,EAD3B,4BACsDR,EADtD,oBAFgB,wEAM7BG,QAAQC,IAAR,MAN6B,wDAAH,qD,8IC3C9B,GAAgB,WAAa,2BAA2B,YAAc,4BAA4B,OAAS,uBAAuB,gBAAkB,gCAAgC,WAAa,2BAA2B,eAAiB,+BAA+B,WAAa,4B,2BCK1Q,SAASO,IACtB,OAAsCC,EAAAA,EAAAA,UAAS,IAA/C,eAAOC,EAAP,KAAoBC,EAApB,KACA,GAAwCF,EAAAA,EAAAA,UAAS,IAAjD,eAAOG,EAAP,KAAqBC,EAArB,KACA,GAAwCC,EAAAA,EAAAA,MAAxC,eAAOC,EAAP,KAAqBC,EAArB,KACMC,EAAwBF,EAAaG,IAAI,SACzCC,GAAWC,EAAAA,EAAAA,OAEjBC,EAAAA,EAAAA,YAAU,WACR,GAA8B,OAA1BJ,EAIJ,IACE,IAAMK,EAAe,mCAAG,yGAGZpB,EAAAA,EAAAA,IAAmBe,GAHP,iBAEZM,EAFY,EAEpBC,KAAQD,SAGGE,QACXC,IAAAA,OAAAA,QAAwB,6CAGpBC,EAAaJ,EAAQK,KACzB,kBAA0C,CACxCC,GADF,EAAGA,GAEDC,YAFF,EAAOA,YAGLC,eAHF,EAAoBA,eAApB,IAOFlB,EAAgBc,GAjBM,2CAAH,qDAoBrBL,GAGD,CAFC,MAAOU,GACPhC,QAAQC,IAAI+B,EAAMC,QACnB,CACF,GAAE,CAAChB,EAAuBF,IAsB3B,OACE,iCACE,0BACE,kBAAMmB,SAnBS,SAAAC,GACnBA,EAAMC,iBACN,IAAMC,EAAUF,EAAMG,OAAOC,SAASC,OAAhCH,MAKN,GAHA1B,EAAe0B,EAAMI,cAAcC,QACnC1B,EAAgB,CAAEb,MAAOkC,EAAMI,cAAcC,SAElB,KAAvBhC,EAAYgC,OAGd,OAFAhB,IAAAA,OAAAA,QAAwB,wCACxBW,EAAQ,IAIV1B,EAAe,GAChB,EAKmCgC,UAAWC,EAAAA,WAAzC,WACE,kBACEC,KAAK,OACLC,aAAa,MACbC,KAAK,SACLC,WAAS,EACTC,YAAY,eACZZ,MAAO3B,EACPwC,SA/BO,SAAC,GAAgB,IAAdZ,EAAa,EAAbA,OAClB3B,EAAe2B,EAAOD,MACvB,EA8BSM,UAAWC,EAAAA,eAEb,mBAAQC,KAAK,SAASF,UAAWC,EAAAA,OAAjC,yBAMHhC,IACC,eAAI+B,UAAWC,EAAAA,gBAAf,SACGhC,EAAagB,KAAI,YAA0C,IAAvCC,EAAsC,EAAtCA,GAAIC,EAAkC,EAAlCA,YAAaC,EAAqB,EAArBA,eACpC,OACE,eAAIY,UAAWC,EAAAA,WAAf,UACE,UAAC,KAAD,CACEO,GAAE,kBAAatB,GACfuB,MAAO,CAAEC,KAAMlC,GAEfwB,UAAWC,EAAAA,eAJb,WAME,gBAAKD,UAAWC,EAAAA,SAAhB,UACE,gBACED,UAAWC,EAAAA,UACXU,IACExB,EAAW,0CAC4BA,GAD5B,6DAIbyB,IAAKxB,EACLyB,MAAM,OACNC,OAAO,YAGX,eAAId,UAAWC,EAAAA,WAAf,SAAgCb,MAhB3BF,IAJ2BA,EAwBvC,QAKV,C","sources":["components/utils/apiMovies.js","webpack://react-homework-template/./src/pages/Movies/Movies.module.css?82ee","pages/Movies/Movies.jsx"],"sourcesContent":["import axios from 'axios';\nconst KEY = '8664a2b6db354b584ef037e248f4b600';\n// const BASE_URL = 'https://api.themoviedb.org/3';\n\nexport const fetchTrendingMovies = async () => {\n  try {\n    return await axios.get(\n      `https://api.themoviedb.org/3/trending/movie/week?api_key=${KEY}`\n    );\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nexport const fetchMoviesByQuery = async query => {\n  try {\n    return await axios.get(\n      `https://api.themoviedb.org/3/search/movie?api_key=${KEY}&language=en-US&query=${query}&page=1`\n    );\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nexport const fetchMovieInfo = async movieId => {\n  try {\n    return await axios.get(\n      `https://api.themoviedb.org/3/movie/${movieId}?api_key=${KEY}&language=en-US`\n    );\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nexport const fetchMovieCast = async movieId => {\n  try {\n    return await axios.get(\n      `https://api.themoviedb.org/3/movie/${movieId}/credits?api_key=${KEY}&language=en-US`\n    );\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nexport const fetchMovieReviews = async movieId => {\n  try {\n    return await axios.get(\n      `https://api.themoviedb.org/3/movie/${movieId}/reviews?api_key=${KEY}&language=en-US`\n    );\n  } catch (error) {\n    console.log(error);\n  }\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"searchForm\":\"Movies_searchForm__J4-xw\",\"searchInput\":\"Movies_searchInput__8fq2n\",\"button\":\"Movies_button__GcIka\",\"trendingGallery\":\"Movies_trendingGallery__rtei6\",\"findedItem\":\"Movies_findedItem__YJrn9\",\"findedItemLink\":\"Movies_findedItemLink__hg7wG\",\"titleMovie\":\"Movies_titleMovie__6vNhI\"};","import { useEffect, useState } from 'react';\nimport { Link, useSearchParams, useLocation } from 'react-router-dom';\nimport { fetchMoviesByQuery } from '../../components/utils/apiMovies';\nimport css from './Movies.module.css';\nimport Notiflix from 'notiflix';\n\nexport default function Movies() {\n  const [searchQuery, setSearchQuery] = useState('');\n  const [findedMovies, setFindedMovies] = useState([]);\n  const [searchParams, setSearchParams] = useSearchParams();\n  const searchQueryFromParams = searchParams.get('query');\n  const location = useLocation();\n\n  useEffect(() => {\n    if (searchQueryFromParams === null) {\n      return;\n    }\n\n    try {\n      const getFindedMovies = async () => {\n        const {\n          data: { results },\n        } = await fetchMoviesByQuery(searchQueryFromParams);\n\n        if (!results.length) {\n          Notiflix.Notify.warning('Nothing found for your request, try again');\n        }\n\n        const findedData = results.map(\n          ({ id, poster_path, original_title }) => ({\n            id,\n            poster_path,\n            original_title,\n          })\n        );\n\n        setFindedMovies(findedData);\n      };\n\n      getFindedMovies();\n    } catch (error) {\n      console.log(error.message);\n    }\n  }, [searchQueryFromParams, searchParams]);\n\n  const onChange = ({ target }) => {\n    setSearchQuery(target.value);\n  };\n\n  const handleSubmit = event => {\n    event.preventDefault();\n    let { value } = event.target.elements.search;\n\n    setSearchQuery(value.toLowerCase().trim());\n    setSearchParams({ query: value.toLowerCase().trim() });\n\n    if (searchQuery.trim() === '') {\n      Notiflix.Notify.warning('Write movie title for searching');\n      value = '';\n      return;\n    }\n\n    setSearchQuery('');\n  };\n\n  return (\n    <>\n      <div>\n        <form onSubmit={handleSubmit} className={css.searchForm}>\n          <input\n            type=\"text\"\n            autoComplete=\"off\"\n            name=\"search\"\n            autoFocus\n            placeholder=\"search movie\"\n            value={searchQuery}\n            onChange={onChange}\n            className={css.searchInput}\n          />\n          <button type=\"submit\" className={css.button}>\n            Search\n          </button>\n        </form>\n      </div>\n\n      {findedMovies && (\n        <ul className={css.trendingGallery}>\n          {findedMovies.map(({ id, poster_path, original_title }) => {\n            return (\n              <li className={css.findedItem} key={id}>\n                <Link\n                  to={`/movies/${id}`}\n                  state={{ from: location }}\n                  key={id}\n                  className={css.findedItemLink}\n                >\n                  <div className={css.imgThumb}>\n                    <img\n                      className={css.imgPoster}\n                      src={\n                        poster_path\n                          ? `https://image.tmdb.org/t/p/w500/${poster_path}`\n                          : `https://brinkys.gr/media/products//Image-Not-Available.png`\n                      }\n                      alt={original_title}\n                      width=\"100%\"\n                      height=\"100%\"\n                    />\n                  </div>\n                  <h2 className={css.titleMovie}>{original_title}</h2>\n                </Link>\n              </li>\n            );\n          })}\n        </ul>\n      )}\n    </>\n  );\n}\n"],"names":["KEY","fetchTrendingMovies","axios","console","log","fetchMoviesByQuery","query","fetchMovieInfo","movieId","fetchMovieCast","fetchMovieReviews","Movies","useState","searchQuery","setSearchQuery","findedMovies","setFindedMovies","useSearchParams","searchParams","setSearchParams","searchQueryFromParams","get","location","useLocation","useEffect","getFindedMovies","results","data","length","Notiflix","findedData","map","id","poster_path","original_title","error","message","onSubmit","event","preventDefault","value","target","elements","search","toLowerCase","trim","className","css","type","autoComplete","name","autoFocus","placeholder","onChange","to","state","from","src","alt","width","height"],"sourceRoot":""}